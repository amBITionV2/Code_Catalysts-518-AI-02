from flask import Flask, render_template, request, jsonify
import os
import sys
import json
import requests
from dotenv import load_dotenv

# Add scripts directory to Python path
sys.path.append(os.path.join(os.path.dirname(__file__), ''))

# Load environment variables
load_dotenv()

app = Flask(__name__)

# Enable CORS
@app.after_request
def after_request(response):
    response.headers.add('Access-Control-Allow-Origin', '*')
    response.headers.add('Access-Control-Allow-Headers', 'Content-Type')
    response.headers.add('Access-Control-Allow-Methods', 'GET, POST, OPTIONS')
    return response

@app.route('/')
def index():
    return render_template('index.html')

@app.route('/chat', methods=['POST'])
def chat():
    try:
        if not request.is_json:
            return jsonify({"error": "Content-Type must be application/json"}), 400

        message = request.json.get('message')
        if not message:
            return jsonify({"error": "No message provided"}), 400

        # Get API key from environment variables
        api_key = os.getenv('OPENROUTER_API_KEY')
        if not api_key:
            return jsonify({"error": "Chat service not configured properly"}), 500

        # System prompt to guide the AI's responses
        system_prompt = """You are KCET College Mate, an AI assistant that helps students with college information.
        Your role is to provide accurate and helpful details about:
        - Engineering colleges in Karnataka
        - College rankings and reputations
        - Campus facilities and infrastructure
        - Branch-wise curriculum and faculty
        - Placement statistics and top recruiters
        - Campus life and extracurricular activities
        - Hostel and accommodation details
        - Any other college-related queries
        
        Keep responses student-friendly, concise, and focused on helping students make informed college choices.
        Be encouraging and supportive in your responses."""

        headers = {
            "Content-Type": "application/json",
            "Authorization": f"Bearer {api_key}",
            "HTTP-Referer": "http://localhost:5000",
            "X-Title": "KCET College Mate"
        }

        # Try to use OpenRouter first, fall back to local responses if it fails
        try:
            # First try with a different model
            payload = {
                "model": "openai/gpt-3.5-turbo",  # Try a different model
                "messages": [
                    {"role": "system", "content": system_prompt},
                    {"role": "user", "content": message}
                ],
                "max_tokens": 300,
                "temperature": 0.7,
            }

            # Make request to OpenRouter API
            response = requests.post(
                "https://openrouter.ai/api/v1/chat/completions",
                headers=headers,
                json=payload,
                timeout=10  # 10 seconds timeout
            )
            
            response.raise_for_status()  # Raise exception for HTTP errors
            response_data = response.json()
            
            # Extract and return the AI's response
            if 'choices' in response_data and len(response_data['choices']) > 0:
                response_text = response_data['choices'][0]['message']['content'].strip()
                return jsonify({"response": response_text})
            else:
                raise Exception("Unexpected response format from AI service")
                
        except Exception as e:
            # Fallback to local responses if API fails
            print(f"API Error: {str(e)}")
            return jsonify({"error": str(e)}), 500

    except Exception as e:
        print(f"Unexpected error: {str(e)}")
        return jsonify({"error": "An unexpected error occurred. Please try again."}), 500

@app.route('/predict', methods=['POST'])
def predict():
    try:
        # Get JSON data from request
        data = request.get_json()
        if not data:
            return jsonify({"success": False, "error": "No data provided"}), 400
            
        # Validate required fields
        required_fields = ['rank', 'category', 'location', 'branch', 'topn']
        missing_fields = [field for field in required_fields if field not in data]
        if missing_fields:
            return jsonify({
                "success": False, 
                "error": f"Missing required fields: {', '.join(missing_fields)}"
            }), 400

        # Validate data types
        try:
            rank = int(data['rank'])
            topn = int(data['topn'])
            category = str(data['category']).strip()
            location = str(data['location']).strip()
            branch = str(data['branch']).strip()
        except (ValueError, TypeError) as e:
            return jsonify({
                "success": False,
                "error": f"Invalid data format: {str(e)}"
            }), 400

        # Import prediction function
        import scripts.kcet_l2r_train_infer as predictor

        try:
            # Get recommendations
            recommendations = predictor.predict_colleges(
                rank=rank,
                category=category,
                location=location.upper(),
                branch=branch.upper(),
                topn=topn
            )
            
            if not recommendations:
                return jsonify({
                    "success": False,
                    "error": "No colleges found matching your criteria"
                }), 404

            return jsonify({
                "success": True,
                "data": recommendations
            })

        except Exception as e:
            print(f"Prediction error: {str(e)}")
            return jsonify({
                "success": False,
                "error": f"Error during prediction: {str(e)}"
            }), 500

    except Exception as e:
        print(f"Request processing error: {str(e)}")
        return jsonify({
            "success": False,
            "error": f"Could not process request: {str(e)}"
        }), 400

def handle_local_response(message):
    """Handle responses locally when API is not available"""
    message = message.lower()
    
    responses = {
        'hello': 'üëã Hello! I\'m KCET College Mate, your guide to engineering colleges in Karnataka! How can I assist you today?',
        'hi': 'üëã Hi there! I\'m here to help you explore colleges. What would you like to know?',
        'college': 'üè´ Top engineering colleges in Karnataka include:\n‚Ä¢ RVCE, Bangalore\n‚Ä¢ PES University, Bangalore\n‚Ä¢ BMS College of Engineering, Bangalore\n‚Ä¢ MS Ramaiah Institute of Technology, Bangalore\n‚Ä¢ NITK Surathkal\n‚Ä¢ PESIT, Bangalore\n‚Ä¢ SJCE, Mysore\n‚Ä¢ NIE, Mysore',
        'branch': 'üîß Popular engineering branches include:\n‚Ä¢ Computer Science & Engineering (CSE)\n‚Ä¢ Information Science & Engineering (ISE)\n‚Ä¢ Electronics & Communication (ECE)\n‚Ä¢ Mechanical Engineering (Mech)\n‚Ä¢ Civil Engineering (Civil)\n‚Ä¢ Electrical & Electronics (EEE)\n‚Ä¢ Artificial Intelligence & Machine Learning (AIML)\n‚Ä¢ Data Science (DS)',
        'campus': 'üèõÔ∏è Top colleges with excellent campus facilities:\n‚Ä¢ RVCE - 52-acre campus, modern labs, sports complex\n‚Ä¢ PES University - 50+ acres, innovation center, startup hub\n‚Ä¢ MSRIT - 12-acre campus, research centers, tech parks\n‚Ä¢ NITK - 295-acre beachfront campus, national importance',
        'placement': 'üíº Top placement colleges (2023 avg. package):\n‚Ä¢ RVCE: ‚Çπ18-25 LPA (CSE), 100+ recruiters\n‚Ä¢ PES: ‚Çπ16-22 LPA (CSE), 250+ companies\n‚Ä¢ MSRIT: ‚Çπ15-20 LPA (CSE), 150+ recruiters\n‚Ä¢ BMSCE: ‚Çπ14-18 LPA (CSE), 100+ companies',
        'hostel': 'üè† Hostel facilities at top colleges:\n‚Ä¢ RVCE: Separate hostels, AC/non-AC options, mess\n‚Ä¢ PES: On-campus hostels, WiFi, gym, laundry\n‚Ä¢ MSRIT: Multiple hostels, food court, sports\n‚Ä¢ NITK: 15+ hostels, medical center, sports complex',
        'fees': 'üí∞ Approximate annual fees for BE/BTech (2024):\n‚Ä¢ RVCE: ‚Çπ1.2-1.5L (Govt quota), ‚Çπ3-4L (Management)\n‚Ä¢ PES: ‚Çπ3-4L (CSE), ‚Çπ2-3L (other branches)\n‚Ä¢ MSRIT: ‚Çπ1-1.2L (Govt), ‚Çπ3-3.5L (Management)\n‚Ä¢ BMSCE: ‚Çπ80K-1L (Govt), ‚Çπ2-2.5L (Management)',
        'help': '‚ÑπÔ∏è I can help you with information about:\n‚Ä¢ College comparisons\n‚Ä¢ Branch-wise details\n‚Ä¢ Campus facilities\n‚Ä¢ Placement statistics\n‚Ä¢ Hostel & fees\n‚Ä¢ Admission process\n‚Ä¢ And more! Just ask your question.'
    }
    
    # Find the best matching response
    for keyword, response in responses.items():
        if keyword in message:
            return jsonify({"response": response})
    
    # Default response if no keywords match
    return jsonify({
        "response": "I'm having trouble connecting to the AI service. " \
                   "Here are some topics I can help with: \n" \
                   "- College cutoffs \n- Admission procedures \n- Document requirements \n- Branch information"
    })

if __name__ == '__main__':
    # Enable debug mode for better error messages
    app.debug = True
    # Run on localhost only for security
    app.run(host='127.0.0.1', port=5000)
